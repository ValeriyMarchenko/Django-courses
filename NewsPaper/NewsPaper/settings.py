"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import redis

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%#yqc^enr$hsoq&5bui9l2hj*t6&&f^s=33flefv-(ix)izj5@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
    'django.contrib.flatpages',
    'django.contrib.sites',
    'django_filters',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
    
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR/'static']

LOGIN_URL = 'http://127.0.0.1:8000/accounts/login/?next=/'
LOGIN_REDIRECT_URL = 'news/'
ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}


APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds


EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 's44tpdude'  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = '' # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно

ADMINS = [
    ('STP', 's44tpdude@yandex.ru'),
    # список всех админов в формате ('имя', 'их почта')
]
SERVER_EMAIL = 's44tpdude@yandex.ru'  # это будет у нас вместо аргумента FROM в массовой рассылке

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER+'@yandex.ru'
ACCOUNT_EMAIL_VRIFICATION = 'mandatory'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTIFICATION_METHOD = 'email'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_SUBJECT_PREFIX = ' News-Portal '

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

CELERY_BROKER_URL = 'redis://:v7PKtDojnEMbk9BV0br3vR9273wXi0Bl@redis-18890.c250.eu-central-1-1.ec2.cloud.redislabs.com:18890'
CELERY_RESULT_BACKEND = 'redis://:v7PKtDojnEMbk9BV0br3vR9273wXi0Bl@redis-18890.c250.eu-central-1-1.ec2.cloud.redislabs.com:18890'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # Форматы выдаваемых сообщений
    'formatters': {
        # Формат для всех сообщений уровня Debug и выше, выводящихся в консоль (уровень, время, сообщение)
        'base_format': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
        # Формат сообщений Warning и выше (включает путь к источнику события pathname)
        'warning_format': {
            'format': '%(levelname)s %(asctime)s %(pathname)s %(message)s'
        },
        # Формат сообщений Error и Critical, а также для файла errors.log (содержит стек ошибок exc_info)
        'error_format': {
            'format': '%(levelname)s %(asctime)s %(pathname)s %(exc_info)s %(message)s'
        },
        # Формат сообщений для файла general.log (время, уровень, название модуля)
        'general_format': {
            'format': '%(levelname)s %(asctime)s %(module)s'
        },
        # Формат сообщений для файла security.log (время, уровень, название модуля, сообщение)
        'security_format': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        }
    },
    # Фильтры
    'filters': {
        # Фильтр для сообщений при DEBUG = true
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        # Фильтр для сообщений при DEBUG = false
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    # Обработчики сообщений
    'handlers': {
        # Вывод в консоль сообщений уровня Debug и выше (если Debug = true)
        'base_console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'base_format'
        },
        # Вывод в консоль сообщений уровня Warning и выше (если Debug = true)
        'warning_console': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning_format'
        },
        # Вывод в консоль сообщений уровня Error и выше (если Debug = true)
        'error_console': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'error_format'
        },
        # Запись в файл general.log сообщений уровня Info и выше
        'general_log_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'general.log'),
            'formatter': 'general_format'
        },
        # Запись в файл errors.log сообщений уровня Error и выше
        'error_log_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'errors.log'),
            'formatter': 'error_format'
        },
        # Запись в файл security.log всех сообщений
        'security_log_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'security.log'),
            'formatter': 'security_format'
        },
        # Отправка на почту сообщений уровня Error и выше (если Debug = false)
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'warning_format'
        }
    },
    # отлов сообщений
    'loggers': {
        # Вывод всех сообщений в консоль и запись в general.log
        # сообщений от основного логгера django
        'django': {
            'handlers': ['base_console', 'warning_console', 'error_console', 'general_log_file'],
            'propagate': True,
        },
        # Запись в errors.log и отправка по почте сообщений от django.request
        'django.request': {
            'handlers': ['error_log_file', 'mail_admins'],
            'propagate': False,
        },
        # Запись в errors.log и отправка по почте сообщений от django.server
        'django.server': {
            'handlers': ['error_log_file', 'mail_admins'],
            'propagate': False,
        },
        # Запись в errors.log сообщений от django.template
        'django.template': {
            'handlers': ['error_log_file'],
            'propagate': False,
        },
        # Запись в errors.log сообщений от django.db_backends
        'django.db_backends': {
            'handlers': ['error_log_file'],
            'propagate': False,
        },
        # Запись в security.log сообщений от django.security
        'django.security': {
            'handlers': ['security_log_file'],
            'propagate': False,
        },
    }

}